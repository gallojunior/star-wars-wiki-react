Documentação do Expo: https://docs.expo.dev 
Documentação do Styled Components: https://styled-components.com/docs/basics

Link do Figma com cores e logo do projeto: https://www.figma.com/file/FcJqDIFJpy43Zik4QhoJ39/DevRiseWeek---StarWars?type=design&node-id=566-2&mode=design&t=1F28Xy5ni5S3wAh2-0

Criar o projeto
    npx create-expo-app StarWarsWiki
    cd StarWarsWiki

Correção de IP do React necessário em alguns casos, executar no powershell, dentro da pasta system32
    setx /M REACT_NATIVE_PACKAGER_HOSTNAME 192.168.1.2

Executar o projeto
npx expo start --localhost --android


copiar para assets imagem do logo: https://drive.google.com/drive/folders/1wQaElES-Sw6grK8WT7JVVopfYM2vi_Pc?usp=sharing


alterar App.js:
import { StatusBar } from 'expo-status-bar';
import { StyleSheet, Text, View, Image } from 'react-native';
import logoImage from './assets/LogoEmpire.png';


export default function App() {
  return (
    <View style={styles.container}>
      <Image source={logoImage} style={styles.logo} />
      <Text style={styles.title}>Star Wars Wiki!</Text>
      <StatusBar style="auto" />
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#161616',
    alignItems: 'center',
    justifyContent: 'center',
  },
  logo: {
    width: 64,
    height: 64,
  },
  title: {
    color: 'white',
    marginTop: 10,
    fontSize: 24,
    fontWeight: 'bold'
  }
});


Criar a seguinte estrutura de pastas
   - src
        - components
            - atoms
            - molecules
            - organisms
        - screens
            -SplashScreen


Dentro da SplashScreen criar um arquivo index.js:
import { StatusBar } from 'expo-status-bar';
import { StyleSheet, Text, View, Image } from 'react-native';
import logoImage from '../../../assets/LogoEmpire.png';

export default function SplashScreen() {
  return (
    <View style={styles.container}>
      <Image source={logoImage} style={styles.logo} />
      <Text style={styles.title}>StarWars - Wiki</Text>
      <StatusBar style="auto" />
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#161616',
    alignItems: 'center',
    justifyContent: 'center',
  },
  logo: {
    width: 64,
    height: 64,
  },
  title: {
    color: 'white',
    marginTop: 10,
    fontSize: 24,
    fontWeight: 'bold'
  }
});


Alterar o arquivo App.js:
import SplashScreen from './src/screens/SplashScreen';

export default function App() {
  return (
    <SplashScreen />
  );
}


Na pasta atoms, criar uma pasta Text e um arquivo index.js:
import React from 'react'
import { Text, StyleSheet } from 'react-native'

export const CustomText = ({ children }) => {
  return (
      <Text style={styles.title}>
        {children}
      </Text>
  )
}

const styles = StyleSheet.create({
    title: {
      color: 'white',
      marginTop: 10,
      fontSize: 24,
      fontWeight: 'bold'
    }
  });


Criar na pasta atoms, um arquivo index.js:
export * from './Text'


Criar na pasta components um arquivo index.js:
export * from './atoms'


Alterar o código do arquivo SplashScreen\index.js:
import { StatusBar } from 'expo-status-bar';
import { StyleSheet, View, Image } from 'react-native';
import { CustomText } from '../../components';
import logoImage from '../../../assets/LogoEmpire.png';

export default function SplashScreen() {
  return (
    <View style={styles.container}>
      <Image source={logoImage} style={styles.logo} />
      <CustomText>StarWars - Wiki</CustomText>
      <StatusBar style="auto" />
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#161616',
    alignItems: 'center',
    justifyContent: 'center',
  },
  logo: {
    width: 64,
    height: 64,
  }
});


Criar na pasta atoms uma pasta Logo e um arquivo index.js:
import React from 'react'
import { StyleSheet, Image } from 'react-native';
import logoImage from '../../../../assets/LogoEmpire.png';

export const Logo = () => {
  return (
      <Image source={logoImage} style={styles.logo} />
  );
}

const styles = StyleSheet.create({
  logo: {
    width: 64,
    height: 64,
  }
});


Alterar o arquivo atoms\index.js:
export * from './Text'
export * from './Logo'


Alterar o SplashScreen\index.js:
import { StatusBar } from 'expo-status-bar';
import { StyleSheet, View } from 'react-native';
import { CustomText, Logo } from '../../components';

export default function SplashScreen() {
  return (
    <View style={styles.container}>
      <Logo />
      <CustomText>StarWars - Wiki</CustomText>
      <StatusBar style="auto" />
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#161616',
    alignItems: 'center',
    justifyContent: 'center',
  }
});



No terminal executar:
    npm install styled-components


Criar na pasta src\components\atoms\Logo um arquivo styles.js:
import styled from 'styled-components/native'

export const LogoImage = styled.Image`
    height: 64px;
    width: 64px;
`;


Alterar o arquivo src\components\atoms\Logo\index.js:
import React from 'react'
import { LogoImage } from './styles';
import logoImage from '../../../../assets/LogoEmpire.png';

export const Logo = () => {
  return (
    <LogoImage source={logoImage} />
  );
}


Criar na pasta src\components\atoms\Text um arquivo styles.js:
import styled from 'styled-components/native'

export const CustomText = styled.Text`
    color: white;
    margin-top: 10px;
    font-size: 24px;
    font-weight: 800;
`;


Alterar o arquivo src\components\atoms\Text\index.js:
import React from 'react'
import { CustomText } from './styles'

export const Text = ({ children }) => {
  return (
      <CustomText >
        {children}
      </CustomText>
  )
}


Alterar src\screens\SplashScreen\index.js:
import { StatusBar } from 'expo-status-bar';
import { StyleSheet, View } from 'react-native';
import { Text, Logo } from '../../components';

export default function SplashScreen() {
  return (
    <View style={styles.container}>
      <Logo />
      <Text>StarWars - Wiki</Text>
      <StatusBar style="auto" />
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#161616',
    alignItems: 'center',
    justifyContent: 'center',
  }
});


Deixando propriedades dinâmicas:
Altere no SplashScreen\index.js:
    <Text color='gray'>StarWars - Wiki</Text>


Alterar o arquivo src\components\atoms\Text\index.js:
import React from 'react'
import { CustomText } from './styles'

export const Text = ({ children, color }) => {
  return (
      <CustomText color={color}>
        {children}
      </CustomText>
  )
}


Alterar na pasta src\components\atoms\Text um arquivo styles.js:
import styled from 'styled-components/native'

export const CustomText = styled.Text`
    color: ${( {color}) => color || 'white' };
    margin-top: 10px;
    font-size: 24px;
    font-weight: 800;
`;


Volte e altere no SplashScreen\index.js:
    <Text>StarWars - Wiki</Text>




npm install eslint prettier eslint-config-universe @babel/plugin-syntax-decorators @react-native-community/eslint-config babel-plugin-root-import eslint-import-resolver-babel-plugin-root-import eslint-plugin-import eslint-plugin-jsx-a11y eslint-plugin-react eslint-plugin-react-hooks --save-dev


Criar o arquivo .eslinrc.js:
module.exports = {
  root: true,
  extends: '@react-native-community',
  plugins: ['react', 'react-hooks', 'import'],
  settings: {
    'import/resolver': {
      'babel-plugin-root-import': {
        rootPathSuffix: 'src',
      },
    },
  },
  rules: {
    semi: [2, 'never'],
    'no-extra-boolean-cast': 'off',
  },
}


Criar o arquivo .prettierrc.js:
module.exports = {
  printWidth: 80,
  tabWidth: 2,
  semi: false,
  singleQuote: true,
  trailingComma: 'es5',
  jsxBracketSameLine: false,
}


Alterar o arquivo babel.config.js:
module.exports = function(api) {
  api.cache(true);
  return {
    presets: ['babel-preset-expo'],
    plugins: [
      ['@babel/plugin-syntax-decorators', { legacy: true }],
      [
        'babel-plugin-root-import',
        {
          rootPathSuffix: 'src',
        },
      ],
    ],
  };
};



Acessar:
https://docs.expo.dev/develop/user-interface/fonts/


npx expo install expo-font @expo-google-fonts/source-sans-pro
npx expo install expo-splash-screen



Alterar o App.js:
import React from 'react'
import { Splash } from './src/screens/Splash'
import {
  useFonts,
  SourceSansPro_400Regular,
  SourceSansPro_600SemiBold,
  SourceSansPro_700Bold,
  SourceSansPro_900Black,
} from '@expo-google-fonts/source-sans-pro'
import * as SplashScreen from 'expo-splash-screen';

SplashScreen.preventAutoHideAsync();

export default function App() {
  const [fontsLoaded] = useFonts({
    SourceSansPro_400Regular,
    SourceSansPro_600SemiBold,
    SourceSansPro_700Bold,
    SourceSansPro_900Black,
  });

  if (fontsLoaded) {
    SplashScreen.hideAsync();
  } else {
    return null;
  }

  return <Splash />
}


Acrescente no arquivo src\components\atoms\Text\styles.js, a fonte:
import styled from 'styled-components/native'

export const CustomText = styled.Text`
  color: ${( {color}) => color || 'white' };
  margin-top: 10px;
  font-size: 24px;
  font-family: 'SourceSansPro_700Bold';
`;



Criar em src uma pasta styles e dentro os arquivos:
1. colors.js:
export const color = {
  white: '#FFFFFF',
  light: '#E5E5E5',
  red: '#E60C0D',
  dark: '#161616',
  black: '#000000',
}


2. fonts.js:
export const fonts = {
  regular: 'SourceSansPro_400Regular',
  semiBold: 'SourceSansPro_600SemiBold',
  bold: 'SourceSansPro_700Bold',
  black: 'SourceSansPro_900Black',
}


3. metrics.js:
import { Dimensions, PixelRatio } from 'react-native'

const { width } = Dimensions.get('window')

const figmaWidth = 375

const px = (valuePx) => {
  const widthPercent = (valuePx / figmaWidth) * 100
  const screenPixel = PixelRatio.roundToNearestPixel(
    (width * parseFloat(widthPercent)) / 100
  )
  return screenPixel
}

export const metrics = {
  px,
}


4. theme.js:
import { colors } from './colors'
import { fonts } from './fonts'
import { metrics } from './metrics'

export const theme = {
    colors,
    fonts,
    metrics,
}


5. index.js:
export * from './theme'



Altere o código do App.js:
import React from 'react'
import { Splash } from './src/screens/Splash'
import { ThemeProvider } from 'styled-components'
import {
  useFonts,
  SourceSansPro_400Regular,
  SourceSansPro_600SemiBold,
  SourceSansPro_700Bold,
  SourceSansPro_900Black,
} from '@expo-google-fonts/source-sans-pro'
import * as SplashScreen from 'expo-splash-screen'
import { theme } from './src/styles'

SplashScreen.preventAutoHideAsync()

export default function App() {
  const [fontsLoaded] = useFonts({
    SourceSansPro_400Regular,
    SourceSansPro_600SemiBold,
    SourceSansPro_700Bold,
    SourceSansPro_900Black,
  })

  if (fontsLoaded) {
    SplashScreen.hideAsync()
  } else {
    return null
  }

  return (
    <ThemeProvider theme={theme}>
      <Splash />
    </ThemeProvider>
  )
}



Volte ao src\components\atoms\Text\styles.js:
import styled from 'styled-components/native'

export const CustomText = styled.Text`
  color: ${({ color, theme }) => color || theme.colors.white};
  margin-top: ${({ theme }) => theme.metrics.px(10)}px;
  font-size: ${({ theme }) => theme.metrics.px(24)}px;
  font-family: ${({ theme }) => theme.fonts.bold};
`